package SudokuPKG;

public class SudokuBoard {
    private int[][] board = new int[9][9];
    private int[][] boardSolution = new int[9][9];
    // ------------------------------------------

    public SudokuBoard(enDifficulty choice) {
        setBoard(choice);
    }
    // ------------------------------------------

    public void setBoard(enDifficulty choice) {
        switch (choice) {
            case EASY:
                easyFill();
                break;
            case MEDIUM:
                mediumFill();
                break;
            case HARD:
                hardFill();
                break;
            case EXPERT:
                expertFill();
                break;
            case MASTER:
                masterFill();
                break;
            case EXTREME:
                extremeFill();
                break;
            default:
                System.err.println("No level Found");
                break;
        }
    }
    // ------------------------------------------

    void easyFill() {
        board = new int[][] {
                { 0, 0, 4, 5, 3, 1, 6, 7, 2 },
                { 0, 5, 0, 6, 0, 9, 0, 0, 0 },
                { 0, 0, 3, 8, 0, 0, 0, 0, 9 },
                { 8, 3, 0, 4, 0, 0, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 3, 9, 6 },
                { 1, 0, 0, 7, 5, 0, 0, 8, 0 },
                { 0, 7, 8, 0, 0, 0, 0, 0, 5 },
                { 5, 6, 1, 0, 7, 0, 9, 2, 8 },
                { 0, 2, 0, 1, 0, 0, 7, 0, 3 } };
        boardSolution = new int[][] {
                { 9, 8, 4, 5, 3, 1, 6, 7, 2 },
                { 2, 5, 7, 6, 4, 9, 8, 3, 1 },
                { 6, 1, 3, 8, 2, 7, 5, 4, 9 },
                { 8, 3, 2, 4, 9, 6, 1, 5, 7 },
                { 7, 4, 5, 2, 1, 8, 3, 9, 6 },
                { 1, 9, 6, 7, 5, 3, 2, 8, 4 },
                { 3, 7, 8, 9, 6, 2, 4, 1, 5 },
                { 5, 6, 1, 3, 7, 4, 9, 2, 8 },
                { 4, 2, 9, 1, 8, 5, 7, 6, 3 } };
    }
    // ------------------------------------------

    void mediumFill() {
        board = new int[][] {
                { 0, 0, 0, 1, 0, 0, 0, 5, 0 },
                { 0, 7, 1, 9, 0, 2, 0, 0, 0 },
                { 3, 6, 0, 0, 0, 4, 0, 0, 2 },
                { 0, 1, 4, 8, 3, 0, 2, 6, 5 },
                { 0, 0, 0, 6, 7, 0, 0, 9, 0 },
                { 6, 8, 9, 2, 4, 0, 1, 0, 7 },
                { 1, 9, 0, 0, 0, 0, 5, 4, 0 },
                { 0, 0, 3, 0, 0, 6, 0, 0, 0 },
                { 0, 0, 0, 4, 0, 0, 3, 0, 1 } };
        boardSolution = new int[][] {
                { 9, 2, 8, 1, 6, 3, 7, 5, 4 },
                { 4, 7, 1, 9, 5, 2, 6, 8, 3 },
                { 3, 6, 5, 7, 8, 4, 9, 1, 2 },
                { 7, 1, 4, 8, 3, 9, 2, 6, 5 },
                { 5, 3, 2, 6, 7, 1, 4, 9, 8 },
                { 6, 8, 9, 2, 4, 5, 1, 3, 7 },
                { 1, 9, 7, 3, 2, 8, 5, 4, 6 },
                { 2, 4, 3, 5, 1, 6, 8, 7, 9 },
                { 8, 5, 6, 4, 9, 7, 3, 2, 1 } };
    }
    // ------------------------------------------

    void hardFill() {
        board = new int[][] {
                { 0, 0, 7, 0, 5, 2, 0, 0, 6 },
                { 0, 0, 2, 7, 8, 0, 0, 0, 9 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 5, 4, 3, 1, 0, 0 },
                { 0, 7, 3, 1, 9, 0, 0, 0, 0 },
                { 0, 0, 0, 6, 2, 0, 0, 0, 0 },
                { 0, 8, 5, 9, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 2, 6, 1, 8, 0, 0 },
                { 2, 0, 9, 0, 0, 5, 0, 6, 7 } };
        boardSolution = new int[][] {
                { 1, 9, 7, 4, 5, 2, 3, 8, 6 },
                { 3, 4, 2, 7, 8, 6, 5, 1, 9 },
                { 5, 6, 8, 3, 1, 9, 7, 2, 4 },
                { 9, 2, 6, 5, 4, 3, 1, 7, 8 },
                { 4, 7, 3, 1, 9, 8, 6, 5, 2 },
                { 8, 5, 1, 6, 2, 7, 9, 4, 3 },
                { 6, 8, 5, 9, 7, 4, 2, 3, 1 },
                { 7, 3, 4, 2, 6, 1, 8, 9, 5 },
                { 2, 1, 9, 8, 3, 5, 4, 6, 7 } };
    }
    // ------------------------------------------

    void expertFill() {
        board = new int[][] {
                { 0, 0, 0, 3, 6, 0, 1, 0, 8 },
                { 6, 0, 3, 0, 8, 7, 0, 0, 0 },
                { 0, 8, 9, 0, 0, 0, 0, 0, 3 },
                { 0, 0, 0, 0, 7, 0, 0, 0, 5 },
                { 0, 0, 5, 0, 3, 1, 9, 0, 0 },
                { 8, 3, 0, 4, 0, 5, 0, 0, 2 },
                { 9, 0, 0, 0, 0, 0, 5, 2, 0 },
                { 5, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 3, 6, 1, 9, 5, 2, 0, 0, 0 } };
        boardSolution = new int[][] {
                { 4, 5, 2, 3, 6, 9, 1, 7, 8 },
                { 6, 1, 3, 5, 8, 7, 2, 4, 9 },
                { 7, 8, 9, 1, 2, 4, 6, 5, 3 },
                { 1, 9, 4, 2, 7, 6, 8, 3, 5 },
                { 2, 7, 5, 8, 3, 1, 9, 6, 4 },
                { 8, 3, 6, 4, 9, 5, 7, 1, 2 },
                { 9, 4, 8, 7, 1, 3, 5, 2, 6 },
                { 5, 2, 7, 6, 4, 8, 3, 9, 1 },
                { 3, 6, 1, 9, 5, 2, 4, 8, 7 } };
    }
    // ------------------------------------------

    void masterFill() {
        board = new int[][] {
                { 8, 0, 0, 0, 0, 9, 0, 0, 0 },
                { 9, 6, 2, 0, 7, 0, 3, 0, 0 },
                { 0, 3, 7, 2, 5, 6, 0, 0, 0 },
                { 0, 0, 0, 0, 3, 2, 0, 7, 9 },
                { 0, 0, 1, 7, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 5, 0, 0, 0, 6, 0 },
                { 0, 8, 0, 4, 2, 0, 9, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 7 },
                { 0, 0, 9, 6, 0, 0, 0, 5, 0 } };
        boardSolution = new int[][] {
                { 8, 1, 5, 3, 4, 9, 7, 2, 6 },
                { 9, 6, 2, 8, 7, 1, 3, 4, 5 },
                { 4, 3, 7, 2, 5, 6, 8, 9, 1 },
                { 6, 5, 8, 1, 3, 2, 4, 7, 9 },
                { 2, 9, 1, 7, 6, 4, 5, 3, 8 },
                { 7, 4, 3, 5, 9, 8, 1, 6, 2 },
                { 5, 8, 6, 4, 2, 7, 9, 1, 3 },
                { 3, 2, 4, 9, 1, 5, 6, 8, 7 },
                { 1, 7, 9, 6, 8, 3, 2, 5, 4 } };
    }
    // ------------------------------------------

    void extremeFill() {
        board = new int[][] {
                { 0, 3, 0, 0, 0, 0, 0, 8, 0 },
                { 5, 0, 0, 0, 6, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 8, 2, 1, 9 },
                { 0, 0, 7, 9, 0, 0, 0, 6, 0 },
                { 0, 0, 0, 0, 0, 7, 0, 0, 2 },
                { 0, 0, 0, 2, 0, 0, 1, 0, 0 },
                { 0, 7, 1, 3, 4, 0, 0, 0, 0 },
                { 2, 0, 0, 0, 0, 0, 4, 0, 3 },
                { 0, 0, 9, 0, 0, 0, 0, 0, 0 } };
        boardSolution = new int[][] {
                { 1, 3, 2, 4, 7, 9, 6, 8, 5 },
                { 5, 9, 8, 1, 6, 2, 7, 3, 4 },
                { 7, 6, 4, 5, 3, 8, 2, 1, 9 },
                { 4, 2, 7, 9, 1, 3, 5, 6, 8 },
                { 9, 1, 5, 6, 8, 7, 3, 4, 2 },
                { 6, 8, 3, 2, 5, 4, 1, 9, 7 },
                { 8, 7, 1, 3, 4, 5, 9, 2, 6 },
                { 2, 5, 6, 8, 9, 1, 4, 7, 3 },
                { 3, 4, 9, 7, 2, 6, 8, 5, 1 } };
    }
    // ------------------------------------------

    void viewBoard() {
        for (int i = 0; i < board.length; i++) {
            if (i == 3 || i == 6)
                System.out.println(" ===.===.===   ===.===.===   ===.===.=== ");
            else
                System.out.println(" ---.---.---   ---.---.---   ---.---.--- ");

            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] != 0)
                    System.out.print("| " + board[i][j] + " ");
                else
                    System.out.print("|   ");

                if (j == 2 || j == 5)
                    System.out.print("| ");
            }

            System.out.println("|");
        }
        System.out.println(" ---.---.---   ---.---.---   ---.---.--- ");
    }
    // ------------------------------------------

    void updateBoard(SudokuPlayer player) {
        if (((player.move.row - 1) < 9)
                && ((player.move.row - 1) >= 0)
                && ((player.move.column - 1) < 9)
                && ((player.move.column - 1) >= 0)) {
            if (board[player.move.row - 1][player.move.column - 1] != 0) {
                System.out.println(AnsiCodes.BRIGHT_YELLOW + "\nThis cell is already full!\n" + AnsiCodes.RESET);
                player.mistakesCount++;
                return;
            } else if (boardSolution[player.move.row - 1][player.move.column - 1] != player.move.number) {
                System.out.println(AnsiCodes.RED + "\nMISTAKE!\n" + AnsiCodes.RESET);
                player.mistakesCount++;
            } else
                board[player.move.row - 1][player.move.column - 1] = player.move.number;
        } else
            System.out.println(AnsiCodes.RED + "\nInvalid Row or Column number!\n" + AnsiCodes.RESET);
    }
    // ------------------------------------------

    boolean gameEnd() {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] != boardSolution[i][j])
                    return false;
            }
        }
        return true;
    }
    // ------------------------------------------
}